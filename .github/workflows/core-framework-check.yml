name: Core Framework Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    
permissions:
  contents: read
  pull-requests: write  # âœ… Ensures PR labels can be modified

jobs:
  check-core-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            blocks/*/*.css
            blocks/*/*.js
            blocks/*/slots/*.js
            scripts/**/*.js
            styles/*.css
            templates/*/*.css
            templates/*/*.js
            theme-tools/*.*
            tools/**/*.*
            react-app/api/**
            react-app/context/**
            react-app/library/**
            react-app/shared/**
            react-app/store/**
            react-app/utils/**
            react-app/app/*/*.css
            react-app/app/*/*.js
            react-app/app/*/components/**

      - name: Check if core files were changed
        id: check-core
        run: |
          if [[ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]]; then
            echo "core_files_changed=true" >> $GITHUB_OUTPUT
            echo "core_files=${{ steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_OUTPUT
          else
            echo "core_files_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Add label to PR
        if: steps.check-core.outputs.core_files_changed == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['CORE FRAMEWORK']
            })

      - name: echo CORE_REVIEWERS
        run: |
          echo "CORE_REVIEWERS: ${{ vars.CORE_REVIEWERS }}"
          echo "condition: ${{ steps.check-core.outputs.core_files_changed == 'true' && vars.CORE_REVIEWERS != '' }}"

      - name: Process reviewers and create comment
        if: steps.check-core.outputs.core_files_changed == 'true'
        id: process-reviewers
        uses: actions/github-script@v6
        env:
          CORE_REVIEWERS: ${{ vars.CORE_REVIEWERS }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Process files for comment
            const files = '${{ steps.check-core.outputs.core_files }}'.split(' ');
            const formattedFiles = files.map(file => `- \`${file}\``).join('\n');
            
            // Process reviewers
            let reviewersToAdd = [];
            let reviewerMentions = '';
            
            if (process.env.CORE_REVIEWERS) {
              const coreReviewers = process.env.CORE_REVIEWERS.split(',').map(r => r.trim());
              
              // Get PR details including current reviewers and PR author
              const { data: prData } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              
              // Get current reviewers
              const currentReviewers = prData.requested_reviewers ? 
                prData.requested_reviewers.map(reviewer => reviewer.login) : [];
              
              // Get PR author
              const prAuthor = prData.user.login;
              
              // Filter out reviewers who are already on the PR or who raised the PR
              reviewersToAdd = coreReviewers.filter(reviewer => 
                !currentReviewers.includes(reviewer) && reviewer !== prAuthor
              );
              
              // Create @mentions for all reviewers (both new and existing core reviewers)
              const allReviewers = [...new Set([...currentReviewers, ...reviewersToAdd])];
              reviewerMentions = allReviewers
                .filter(reviewer => coreReviewers.includes(reviewer))
                .map(reviewer => `@${reviewer}`)
                .join(' ');
              
              // Add reviewers to PR if there are new ones to add
              if (reviewersToAdd.length > 0) {
                console.log(`Adding reviewers: ${reviewersToAdd.join(', ')}`);
                await github.rest.pulls.requestReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  reviewers: reviewersToAdd
                });
              } else {
                console.log('No new reviewers to add (all core reviewers are already added or are the PR author)');
              }
            }
            
            // Create and post comment
            let commentBody = `## Core Framework Files Detected
            
            This PR contains changes to the following core framework files:
            
            ${formattedFiles}
            
            This PR has been labeled as a "CORE FRAMEWORK" change`;
            
            if (reviewerMentions) {
              commentBody += ` and the following reviewers have been notified: ${reviewerMentions}`;
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
            
            // Store reviewers added for potential future use
            core.setOutput('reviewers_added', reviewersToAdd.join(',')); 