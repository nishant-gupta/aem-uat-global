name: Visual Testing

on:
  workflow_dispatch:  # Allows manual trigger
    inputs:
      Brandcode:
        description: "Brand code for the page"
        required: true
      PageType:
        description: "Page type for the test"
        required: true
      URL1:
        description: "First URL for comparison"
        required: true
      URL2:
        description: "Second URL for comparison"
        required: true
  pull_request:
    types:
      - opened
      - synchronize  # Runs on every new commit push
      - reopened     # Runs if PR is reopened
    branches:
      - main

jobs:
  extract-urls:
    runs-on: ubuntu-latest
    outputs:
      urls: ${{ steps.extract.outputs.urls }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      - name: 📝 Extract URLs, Brand & PageType from PR Description
        id: extract
        run: |
          DESCRIPTION=$(echo "${{ github.event.pull_request.body }}" | tr -d '\r')

          URL_PAIRS=$(echo "$DESCRIPTION" | awk '
            BEGIN { FS=": "; OFS=""; brand=""; pageType=""; before=""; after=""; json="[ "; first=1 }
            /^\s*- Brand:/ { brand=$2 }
            /^\s*- PageType:/ { pageType=$2 }
            /^\s*- Baseline:/ { before=$2 }
            /^\s*- Modified:/ { 
                after=$2;
                if (brand && pageType && before && after) {
                    if (!first) json=json", ";
                    json=json"{ \"brand\": \""brand"\", \"pageType\": \""pageType"\", \"before\": \""before"\", \"after\": \""after"\" }";
                    first=0;
                    brand=""; pageType=""; before=""; after="";
                }
            }
            END { json=json" ]"; print json }
          ')

          # Ensure valid JSON output
          if [[ -z "$URL_PAIRS" || "$URL_PAIRS" == "[ ]" ]]; then
            URL_PAIRS="[]"
          fi

          echo "Extracted URL Pairs: $URL_PAIRS"
          echo "urls=$URL_PAIRS" >> "$GITHUB_OUTPUT"

  cypress-test:
    needs: extract-urls
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pair: ${{ fromJson(needs.extract-urls.outputs.urls) }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 📦 Install Dependencies
        run: npm install

      - name: 🚀 Run Cypress Tests
        id: cypress
        run: |
          npx cypress run --headless --browser chrome --env Brandcode=${{ matrix.pair.brand }},PageType=${{ matrix.pair.pageType }},URL_1=${{ matrix.pair.before }},URL_2=${{ matrix.pair.after }}
        continue-on-error: false

      - name: ✅ Save Test Result
        if: always()
        run: |
          STATUS="❌ Failed"
          if [[ "${{ steps.cypress.outcome }}" == "success" ]]; then
            STATUS="✅ Success"
          fi

          echo "STATUS: $STATUS"

          echo '{
            "brand": "${{ matrix.pair.brand }}",
            "pageType": "${{ matrix.pair.pageType }}",
            "before": "${{ matrix.pair.before }}",
            "after": "${{ matrix.pair.after }}",
            "status": "'$STATUS'"
          }' > results-${{ matrix.pair.brand }}-${{ matrix.pair.pageType }}.json
      - name: 🖼️ Upload Cypress Screenshots & Diff Images
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-${{ matrix.pair.brand }}-${{ matrix.pair.pageType }}
          path: cypress/screenshots/
          retention-days: 7
      - name: 📁 Upload Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.pair.brand }}-${{ matrix.pair.pageType }}
          path: results-${{ matrix.pair.brand }}-${{ matrix.pair.pageType }}.json
  
      - name: 📝 Collect Test Results
        if: always()
        id: test-result
        run: echo "result=${{ steps.cypress.outcome == 'success' && '✅ Passed' || '❌ Failed' }}" >> "$GITHUB_ENV"

  comment-on-pr:
    needs: cypress-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📁 Download Test Results
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📝 Generate PR Comment
        id: generate-comment
        run: |
          cat <<EOF > comment.md
          ### 🖼️ **Visual Test Results**

          | Brand | Page Type | Before | After | Result |
          |-------|-----------|--------|-------|--------|
          EOF

          for file in artifacts/*/results-*.json; do
            BRAND=$(jq -r '.brand' "$file")
            PAGE_TYPE=$(jq -r '.pageType' "$file")
            BEFORE=$(jq -r '.before' "$file")
            AFTER=$(jq -r '.after' "$file")
            STATUS=$(jq -r '.status' "$file")

            echo "| $BRAND | $PAGE_TYPE | [🔗 Link]($BEFORE) | [🔗 Link]($AFTER) | $STATUS |" >> comment.md
          done

          echo "---" >> comment.md
          echo "📎 **[Download Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})**" >> comment.md

      - name: 💬 Post PR Comment
        uses: mshick/add-pr-comment@v2
        with:
          message-path: comment.md
          repo-token: ${{ secrets.PAT_TOKEN }}