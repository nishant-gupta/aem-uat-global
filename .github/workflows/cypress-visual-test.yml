name: Visual Testing

on:
  workflow_dispatch:  # Allows manual trigger
    inputs:
      Brandcode:
        description: "Brand code for the page"
        required: true
      PageType:
        description: "Page type for the test"
        required: true
      URL1:
        description: "First URL for comparison"
        required: true
      URL2:
        description: "Second URL for comparison"
        required: true
  pull_request:
    types:
      - opened
      - synchronize  # Runs on every new commit push
      - reopened     # Runs if PR is reopened
    branches:
      - main

jobs:
  extract-urls:
    runs-on: ubuntu-latest
    outputs:
      urls: ${{ steps.extract.outputs.urls }}
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      - name: üìù Extract URLs, Brand & PageType from PR Description
        id: extract
        run: |
          DESCRIPTION=$(echo "${{ github.event.pull_request.body }}" | tr -d '\r')

          URL_PAIRS=$(echo "$DESCRIPTION" | awk '
            BEGIN { FS=": "; OFS=""; brand=""; pageType=""; before=""; after=""; json="[ "; first=1 }
            /^\s*- Brand:/ { brand=$2 }
            /^\s*- PageType:/ { pageType=$2 }
            /^\s*- Before:/ { before=$2 }
            /^\s*- After:/ { 
                after=$2;
                if (brand && pageType && before && after) {
                    if (!first) json=json", ";
                    json=json"{ \"brand\": \""brand"\", \"pageType\": \""pageType"\", \"before\": \""before"\", \"after\": \""after"\" }";
                    first=0;
                    brand=""; pageType=""; before=""; after="";
                }
            }
            END { json=json" ]"; print json }
          ')

          # Ensure valid JSON output
          if [[ -z "$URL_PAIRS" || "$URL_PAIRS" == "[ ]" ]]; then
            URL_PAIRS="[]"
          fi

          echo "Extracted URL Pairs: $URL_PAIRS"
          echo "urls=$URL_PAIRS" >> "$GITHUB_OUTPUT"

  cypress-test:
    needs: extract-urls
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pair: ${{ fromJson(needs.extract-urls.outputs.urls) }}
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: üì¶ Install Dependencies
        run: npm install

      - name: üöÄ Run Cypress Tests
        id: cypress
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          headed: false # Run in headless mode
          config: screenshotsFolder=cypress/screenshots
          env: Brandcode=${{ matrix.pair.brand }},PageType=${{ matrix.pair.pageType }},URL_1=${{ matrix.pair.before }},URL_2=${{ matrix.pair.after }}
        continue-on-error: false # Ensures workflow fails on test failures

      - name: ‚úÖ Save Test Result
        run: |
          echo "{ \"brand\": \"${{ matrix.pair.brand }}\", \"pageType\": \"${{ matrix.pair.pageType }}\", \"before\": \"${{ matrix.pair.before }}\", \"after\": \"${{ matrix.pair.after }}\", \"status\": \"${{ job.status }}\" }" >> results.json

      - name: üñºÔ∏è Upload Cypress Screenshots & Diff Images
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-${{ matrix.pair.brand }}-${{ matrix.pair.pageType }}
          path: cypress/screenshots/
          retention-days: 7

      - name: üìù Collect Test Results
        id: test-result
        run: echo "result=${{ steps.cypress.outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}" >> "$GITHUB_ENV"

  comment-on-pr:
    needs: cypress-test
    runs-on: ubuntu-latest
    steps:
      - name: üìÅ Download Test Results
        uses: actions/download-artifact@v3
        with:
          name: test-results

      - name: üìù Generate PR Comment
        id: generate-comment
        run: |
          COMMENT="### **Visual Test Results**\n"
          while read -r line; do
            BRAND=$(echo $line | jq -r '.brand')
            PAGE_TYPE=$(echo $line | jq -r '.pageType')
            BEFORE=$(echo $line | jq -r '.before')
            AFTER=$(echo $line | jq -r '.after')
            STATUS=$(echo $line | jq -r '.status')

            ICON="‚úÖ"
            if [[ "$STATUS" != "success" ]]; then
              ICON="‚ùå"
            fi

            COMMENT+="\n- **Brand:** $BRAND"
            COMMENT+="\n- **Page Type:** $PAGE_TYPE"
            COMMENT+="\n- **Before:** [$BEFORE]($BEFORE)"
            COMMENT+="\n- **After:** [$AFTER]($AFTER)"
            COMMENT+="\n- **Result:** $ICON $STATUS\n"
          done < results.json

          echo "$COMMENT" > comment.md

      - name: üí¨ Post PR Comment
        uses: mshick/add-pr-comment@v2
        with:
          message-path: comment.md
          repo-token: ${{ secrets.PAT_TOKEN }}